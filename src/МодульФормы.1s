Перем 
	ОписаниеФильтра,ЗФ1,ЗФ2,ЗФ3,ЗФ4,ЗФ5,ЗФ6, ЗФ7, ЗФ8,	// для универсального фильтра     
	глТЗДерево,
	ЗапросСКЛ,
	Таб,ГлубинаАнализа,
	МаксГруппировка;//Для хранения числа группировок. Для оформления группировочных строк в таблице.
	
Процедура Печать(пТаблица,пСортируемыеКолонки = "") Далее
	
//--------------------------------------------------------------------------------- 
Функция ВыборСортировки(пИмяПоказателя)
	Сп = СоздатьОбъект("СписокЗначений");
	//Сп.ДобавитьЗначение(пТовар,"Товар");
	Сп.ДобавитьЗначение(пИмяПоказателя,"Показатель");
	Возврат Сп;
КонецФункции	// ВыборСортировки 	
            
//--------------------------------------------------------------------------------- 
Процедура ОбработкаЯчейкиТаблицы(пЗначение,пФлагСтандОбраб,пТаблица,пАдрес)
	Перем ВыбЗнач;
	
	Если ТипЗначенияСтр(пЗначение) = "СписокЗначений" Тогда
		Сп = СоздатьОбъект("СписокЗначений");
		//Сп.ДобавитьЗначение("Открыть","Открыть карточку");
		Сп.ДобавитьЗначение("Сорт+","Сортировать по возр.");
		Сп.ДобавитьЗначение("Сорт-","Сортировать по убыв.");

		Если Сп.ВыбратьЗначение(ВыбЗнач,,,,1) = 1 Тогда
			//СортируемыеКолонки = "";
			ИмяПоказателя = пЗначение.Получить("Показатель");
			СортируемыеКолонки = ИмяПоказателя;

			//глТЗДерево.Сортировать(СортируемыеКолонки + ?(ВыбЗнач = "Сорт+","+","-"));
			Печать(глТЗДерево,СортируемыеКолонки + ?(ВыбЗнач = "Сорт+","+","-"));
		КонецЕсли;
	Иначе
		пФлагСтандОбраб =1;	
	КонецЕсли;
КонецПроцедуры

//--------------------------------------------------------------------------------- 
Функция МаксимумИзТЗ(пИмя,пТЗ)
	Перем лТЗ;
	
	лРезультат = 0;
                  
	пТЗ.Выгрузить(лТЗ,,,пИмя);
	лТЗ.ВыбратьСтроки();
	
	Пока лТЗ.ПолучитьСтроку() = 1 Цикл
		лРезультат = Макс(лРезультат,лТЗ.ПолучитьЗначение(лТЗ.НомерСтроки,пИмя));
	КонецЦикла;
	
	Возврат лРезультат;
КонецФункции


//--------------------------------------------------------------------------------- 
Функция ОбновитьФорму()
	//ПозНоменклатура = Группировка.НайтиЗначение("Номенклатура");
	//лНоменклатураЕсть = Группировка.Пометка(ПозНоменклатура);
	//
	//лВыбТипЦенЕсть = 1- ПустоеЗначение(ВыбТипЦен);
	//лДоступностьПоказателейЦен = ?((лВыбТипЦенЕсть=1)и(лНоменклатураЕсть = 1),1,0);
	//
	//Форма.ВыбТипЦен.Доступность(лНоменклатураЕсть);
	//Форма.флПодгруппа.Доступность(лНоменклатураЕсть);
	//Форма.флСрокГодности.Доступность(лНоменклатураЕсть);
	//Форма.флСтавкаНДС.Доступность(лНоменклатураЕсть);
	//Форма.флСуммаНДС.Доступность(лДоступностьПоказателейЦен);
	//Форма.флЦенаБезНДС.Доступность(лДоступностьПоказателейЦен);
	//Форма.флЦенаСНДС.Доступность(лДоступностьПоказателейЦен);
КонецФункции	// ОбновитьФорму

//--------------------------------------------------------------------------------- 
Функция ЗагрузитьВДеревоТЗ(Знач пТЗ,пГруппировка,Знач пРесурсыГрупп)
	
	Если пТЗ.КоличествоСтрок() = 0 Тогда
		Возврат пТЗ;
	КонецЕсли;
	
	лТЗ = СоздатьОбъект("ТаблицаЗначений");
	лГруппировки = СоздатьОбъект("СписокЗначений");
	пГруппировка.Выгрузить(лГруппировки);

	Если лГруппировки.РазмерСписка()>0 Тогда        
		ИмяКолонки = лГруппировки.ПолучитьЗначение(1);
		лГруппировки.УдалитьЗначение(1);
		                           
		пТЗ.Сортировать(ИмяКолонки);
		
		лТЗ.НоваяКолонка("Группировка");
		лТЗ.НоваяКолонка("ИмяГруппировки");
		лТЗ.НоваяКолонка("ТЗДетализация","ТаблицаЗначений"); 
		              
		КолВоРесурсов = пРесурсыГрупп.РазмерСписка();
		Для Сч = 1 По КолВоРесурсов Цикл
			ИмяРесурса = пРесурсыГрупп.ПолучитьЗначение(Сч);
			лТЗ.НоваяКолонка(ИмяРесурса,"Число"); 
		КонецЦикла;
	Иначе            
		Возврат пТЗ;	//Детализация
	КонецЕсли;

	НомерНачСтроки = 1;
	НомерКонСтроки = 1;
	
	СчСтрок = 1;
	            
	Пока 1=1 Цикл
		ТекЗначГруппировки = пТЗ.ПолучитьЗначение(СчСтрок,ИмяКолонки);
		
		НомерКонСтроки = СчСтрок;
		
		Если СчСтрок = пТЗ.КоличествоСтрок() Тогда
			СледЗначениеГруппировки = "!№;%:?*()";
		Иначе
			СледЗначениеГруппировки = пТЗ.ПолучитьЗначение(СчСтрок+1,ИмяКолонки);
		КонецЕсли;
			
			
		Если (ТекЗначГруппировки<>СледЗначениеГруппировки) Тогда   
			
			лВыгрузка = СоздатьОбъект("ТаблицаЗначений");
			пТЗ.Выгрузить(лВыгрузка,НомерНачСтроки,НомерКонСтроки); 
			
			лВыгрузка.УдалитьКолонку(ИмяКолонки);
			           
			лТЗ.НоваяСтрока();          
			лТЗ.Группировка = ?(ПустоеЗначение(ТекЗначГруппировки)=1,"<"+ИмяКолонки+": ПУСТОЕ ЗНАЧЕНИЕ>",ТекЗначГруппировки);              
			лТЗ.ИмяГруппировки = ИмяКолонки;     
		                  
			лТЗ.ТЗДетализация = ЗагрузитьВДеревоТЗ(лВыгрузка,лГруппировки,пРесурсыГрупп);
			           
			//Расчет суммы по ресурсам.
			Для Сч = 1 По КолВоРесурсов Цикл
				ИмяРесурса = пРесурсыГрупп.ПолучитьЗначение(Сч);
				
				Если (Лев(ИмяРесурса,4)="сред") Тогда //Расчёт среднего
					лИмяРесурса = Сред(ИмяРесурса,5);
					лТЗ.УстановитьЗначение(лТЗ.НомерСтроки,ИмяРесурса,лТЗ.ТЗДетализация.Итог(лИмяРесурса)/лТЗ.ТЗДетализация.КоличествоСтрок());   
				ИначеЕсли (Лев(ИмяРесурса,3)="прц") Тогда	//Расчет доли и среднего по особому
				ИначеЕсли ИмяРесурса = "ВозрастКредита" Тогда
					лТЗ.УстановитьЗначение(лТЗ.НомерСтроки,ИмяРесурса,МаксимумИзТЗ(ИмяРесурса,лТЗ.ТЗДетализация));
				ИначеЕсли ИмяРесурса = "ГлубинаКредита" Тогда
					лТЗ.УстановитьЗначение(лТЗ.НомерСтроки,ИмяРесурса,МаксимумИзТЗ(ИмяРесурса,лТЗ.ТЗДетализация));
				ИначеЕсли ИмяРесурса = "КредитныйЛимит" Тогда
					лТЗ.УстановитьЗначение(лТЗ.НомерСтроки,ИмяРесурса,МаксимумИзТЗ(ИмяРесурса,лТЗ.ТЗДетализация));
				Иначе	
					лТЗ.УстановитьЗначение(лТЗ.НомерСтроки,ИмяРесурса,лТЗ.ТЗДетализация.Итог(ИмяРесурса));   
				КонецЕсли;
			КонецЦикла;			
			
			НомерНачСтроки = СчСтрок+1;
		КонецЕсли;
			
		НомерКонСтроки = СчСтрок;
		СчСтрок = СчСтрок + 1;
		
		Если СчСтрок>пТЗ.КоличествоСтрок() Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	//Расчет долей ресурсов
	Для Сч = 1 По КолВоРесурсов Цикл
		ИмяРесурса = пРесурсыГрупп.ПолучитьЗначение(Сч);
		
		Если Лев(ИмяРесурса,3)="прц" Тогда
			ИмяРесурсаДляРасчетаДоли = Сред(ИмяРесурса,4);
			
			лТЗ.ВыбратьСтроки();
			Пока лТЗ.ПолучитьСтроку() = 1 Цикл       
				ЗначениеРасчетногоРесурса = лТЗ.ПолучитьЗначение(лТЗ.НомерСтроки,ИмяРесурсаДляРасчетаДоли);
				ЗначениеДоли = ?(лТЗ.Итог(ИмяРесурсаДляРасчетаДоли)<>0,ЗначениеРасчетногоРесурса/лТЗ.Итог(ИмяРесурсаДляРасчетаДоли)*100,0);
				лТЗ.УстановитьЗначение(лТЗ.НомерСтроки,ИмяРесурса,ЗначениеДоли);   
			КонецЦикла;                     
			
		ИначеЕсли Лев(ИмяРесурса,4)="сред" Тогда             
			ИмяРесурсаДляРасчетаСреднего = Сред(ИмяРесурса,5);
		КонецЕсли;
	КонецЦикла;			
	
	Возврат лТЗ;          
КонецФункции 

//--------------------------------------------------------------------------------
Функция СмотретьДерево(пТЗ,Родитель = "",УровеньДерева = 1)  
	//Печатаем перемещения
	Если УровеньДерева = 2 Тогда   
		//ПеремещениеНасыщениеАртикульности(пТЗ,"",1);
	КонецЕсли;
	
	ВыбраннаяСтрока = 0;
	Если пТЗ.ВыбратьСтроку(ВыбраннаяСтрока) = 1 Тогда	//Если Ок, то заходим в Детализацию
		Если пТЗ.ВидимостьКолонки("ТЗДетализация") <> -1 Тогда
			пТЗ.ПолучитьСтрокуПоНомеру(ВыбраннаяСтрока);
			СмотретьДерево(пТЗ.ТЗДетализация,пТЗ,УровеньДерева + 1);
		КонецЕсли;
	Иначе												//Если не Ок, то возращаемся к Родителю
		Если Родитель <> "" Тогда
			СмотретьДерево(Родитель,,УровеньДерева - 1);  
		КонецЕсли;
	КонецЕсли;
КонецФункции	// СмотретьДерево(пТЗ)               

//---------------------------------------------------------------------------------
Процедура ПриОткрытии(ФлагВосстановленияНастройки)
	
	Попытка 
		ЗапросСКЛ = СоздатьОбъект("ODBCRecordset");
	Исключение  
		Сообщить(ОписаниеОшибки());
		СтатусВозврата(0);
		Возврат;
	КонецПопытки;
	
	
	Если ФлагВосстановленияНастройки = 0 Тогда

	КонецЕсли;
	
	ДопПараметры = СоздатьОбъект("СписокЗначений"); 
	                                                                  
	лСпр = СоздатьОбъект("Справочник.ВидыСвойств"); 
	лСпр.НайтиПоКоду("00004");//Группы контрагентов
	ДопПараметры.ДобавитьЗначение(лСпр.ТекущийЭлемент(),"ТорговаяСеть");

	Фильтр.Установить("ЗагрузкаНастройки"	,1);
	Фильтр.Установить("ОписаниеФильтра"		,ОписаниеФильтра);
	Фильтр.Установить("ДопПараметры",ДопПараметры);
	
	ОткрытьФорму("Обработка.УстановкаФильтра",Контекст);
КонецПроцедуры  

//--------------------------------------------------------------------------------- 
Процедура ИзменениеПорядкаЭлементов(НаправлениеСдвига,пИмяСписка)
	
	Если пИмяСписка = "Группировка" Тогда
	
		ТекСтр = Группировка.ТекущаяСтрока();
		ПослСдвигСтр = Группировка.РазмерСписка();
		
		Если не((НаправлениеСдвига = 1) и (ТекСтр = ПослСдвигСтр)) Тогда
			Группировка.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
		КонецЕсли;
					
	ИначеЕсли пИмяСписка = "Ресурсы" Тогда
		ТекСтр = Ресурсы.ТекущаяСтрока();
		ПослСдвигСтр = Ресурсы.РазмерСписка();
		
		Если не((НаправлениеСдвига = 1) и (ТекСтр = ПослСдвигСтр)) Тогда
			Ресурсы.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//--------------------------------------------------------------------------------- 
Процедура ПечатьГруппировки(пТЗ,пТаб,пУрГруппировки=1,пСортируемыеКолонки = "")
	Если пТЗ.ВидимостьКолонки("Группировка") = -1 Тогда
		Возврат;
    КонецЕсли;

	печРесурс = ""; 
	
	пТЗ.Сортировать(пСортируемыеКолонки);
	
	пТЗ.ВыбратьСтроки();
	Пока пТЗ.ПолучитьСтроку() = 1 Цикл
		печГруппировка = пТЗ.Группировка;  
		пп = пТЗ.НомерСтроки;
		
		лИмяСекции = "Гр"+(6 - МаксГруппировка + пУрГруппировки);
		Таб.ВывестиСекцию(лИмяСекции + "|ОснВертик");
		                
		ИмяРесурса = "";
		НаименованиеРесурса = "";
		Для сч = 1 По Ресурсы.РазмерСписка() Цикл
			Если Ресурсы.Пометка(сч) = 1 Тогда              
				ИмяРесурса = Ресурсы.ПолучитьЗначение(сч,НаименованиеРесурса);

				печРесурс = пТЗ.ПолучитьЗначение(пТЗ.НомерСтроки,ИмяРесурса);
				
				Если Лев(ИмяРесурса,3) = "прц" Тогда
					печРесурс = "" + Окр(печРесурс,1) + "%";
				ИначеЕсли ИмяРесурса = "ВозрастКредита" Тогда
					
					Если печРесурс >= 9999 Тогда
						печРесурс = Макс(пТЗ.ГлубинаКредита,ГлубинаАнализа, печРесурс - 9999);
						печРесурс = ">" + печРесурс;
					ИначеЕсли печРесурс = 0 Тогда
						печРесурс = "";
					КонецЕсли;
				Иначе
					печРесурс = Формат(печРесурс,"N019.2. ");
				КонецЕсли;
				
				Таб.ПрисоединитьСекцию(лИмяСекции + "|ВертикРесурс");
			КонецЕсли;
		КонецЦикла;
		
		Таб.ПрисоединитьСекцию(лИмяСекции + "|КонецВертикалке");

		
		Если пТЗ.ВидимостьКолонки("ТЗДетализация") <> -1 Тогда
			ПечатьГруппировки(пТЗ.ТЗДетализация,пТаб,пУрГруппировки+1,пСортируемыеКолонки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры	// ПечатьГруппировки(лТЗ)

//--------------------------------------------------------------------------------- 
Процедура Печать(пТаблица,пСортируемыеКолонки = "")
	Если ПустоеЗначение(Таб)=1 Тогда
		Таб = СоздатьОбъект ("Таблица");  
	Иначе     
		Таб.Очистить();
	КонецЕсли;
          
	Если ПустоеЗначение(Фильтр.Получить("УсловияЗапроса")) = 0 Тогда
		СтроковоеПредставлениеФильтра = Фильтр.Получить("СтрЗагУсловия");
	Иначе
		СтроковоеПредставлениеФильтра = "";
	КонецЕсли;
	
	Таб.ВывестиСекцию ("Шапка");  
	
	//******Шапка таблицы 
	ИмяГруппировки = "";
	печГруппировка = "";
	Для сч = 1 По Группировка.РазмерСписка() Цикл
		Если Группировка.Пометка(сч) = 1 Тогда              
			Группировка.ПолучитьЗначение(сч,ИмяГруппировки);
			печГруппировка = печГруппировка + ИмяГруппировки + "/";
		КонецЕсли;
	КонецЦикла;

	//печРесурс = "";
	Таб.ВывестиСекцию ("ШапкаТаблицы|ОснВертик");
	
	//**************************************
	
	ИмяРесурса = "";
	НаименованиеРесурса = "";
	Для сч = 1 По Ресурсы.РазмерСписка() Цикл
		Если Ресурсы.Пометка(сч) = 1 Тогда              
			ИмяРесурса = Ресурсы.ПолучитьЗначение(сч,НаименованиеРесурса);
			Таб.ПрисоединитьСекцию("ШапкаТаблицы|ВертикРесурс");
		КонецЕсли;
	КонецЦикла;
	
	Таб.ПрисоединитьСекцию("ШапкаТаблицы|КонецВертикалке");
	
 
	//******Сетка таблицы
	ПечатьГруппировки(пТаблица,Таб,,пСортируемыеКолонки);
	              
	//******Подвал таблицы 
	Таб.ВывестиСекцию ("Итого|ОснВертик");

	//**************************************
    
	Для сч = 1 По Ресурсы.РазмерСписка() Цикл
		Если Ресурсы.Пометка(сч) = 1 Тогда 
			//Если Ресурсы.ПолучитьЗначение(сч) = "Показатель1" Тогда
				печИтог = глТЗДерево.Итог(Ресурсы.ПолучитьЗначение(сч)); 
				печИтог = Формат(печИтог,"N019.2. ");
			//Иначе
			//	печИтог = "";
			//КонецЕсли;
			
			Таб.ПрисоединитьСекцию("Итого|ВертикРесурс");
		КонецЕсли;
	КонецЦикла;
	
	Таб.ПрисоединитьСекцию("Итого|КонецВертикалке");
	//********************
	
	Таб.ТолькоПросмотр (1);                           
	Таб.ПараметрыСтраницы(2,,,,,,,,,1);//Ландшафт,Автомасштаб
	Таб.Опции(0,0,7,7,"ОпцииПечатиОтчета");
	Таб.Показать("Наименование отчета");
КонецПроцедуры	// Печать(пТЗ) 

//--------------------------------------------------------------------------------- 
Функция ПолучитьПоследниеДокументыНаСумму(пСтрокаТЗ)
	лСуммаДолга = пСтрокаТЗ.СуммаДолга;

	лРезультат = СоздатьОбъект("ТаблицаЗначений");
	лРезультат.НоваяКолонка("Регистратор");
	лРезультат.НоваяКолонка("ТорговаяСеть");
	лРезультат.НоваяКолонка("Контрагент");
	лРезультат.НоваяКолонка("Договор");
	лРезультат.НоваяКолонка("ГлубинаКредита","Число");
	лРезультат.НоваяКолонка("КредитныйЛимит","Число");
	лРезультат.НоваяКолонка("СуммаДокумента","Число");
	лРезультат.НоваяКолонка("ВозрастКредита","Число");
	лРезультат.НоваяКолонка("СуммаДолга","Число");
	лРезультат.НоваяКолонка("СуммаПросрочки","Число");

	лСчитатьПросрочку = ?(лСуммаДолга > МинСуммаЗадолженности,1,0);
	
	Если лСчитатьПросрочку = 1 Тогда
	
		ТекстЗапроса =	"
						|SELECT
						|    Рег.IDDoc as [Док $Документ],
						|    Жур.IDDocDef as Док_вид,
						|    MAX(CAST(LEFT(Жур.Date_Time_IDDoc, 8) as DateTime)) as ДатаДок,
						|    SUM(CASE Рег.DEBKRED WHEN 0 THEN $Рег.СуммаУпр ELSE 0 END) -
						|    SUM(CASE Рег.DEBKRED WHEN 1 THEN $Рег.СуммаУпр ELSE 0 END) as СуммаДвижения
						|FROM
						|    $Регистр.Покупатели as Рег
						|INNER JOIN
						|    _1Sjourn as Жур ON Жур.IDDoc = Рег.IDDoc AND
						|    $Рег.Договор = :ВыбДоговор AND
						|    Жур.Date_Time_IDDoc BETWEEN :НачДата AND :КонДата~
						|GROUP BY
						|    Рег.IDDoc,Жур.IDDocDef
						|ORDER BY 
						|    MAX(CAST(LEFT(Жур.Date_Time_IDDoc, 8) as DateTime)) DESC";
						
		ЗапросСКЛ.УстановитьТекстовыйПараметр("ВыбДоговор",пСтрокаТЗ.Договор);
		ЗапросСКЛ.УстановитьТекстовыйПараметр("НачДата",ВыбДата - Макс(пСтрокаТЗ.ГлубинаКредита,ГлубинаАнализа));
		ЗапросСКЛ.УстановитьТекстовыйПараметр("КонДата",ВыбДата);
						
		лТЗ = ЗапросСКЛ.ВыполнитьИнструкцию(ТекстЗапроса);
	
		лТЗ.ВыбратьСтроки();
		Пока лТЗ.ПолучитьСтроку() = 1 Цикл
			Если лТЗ.СуммаДвижения < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			лРезультат.НоваяСтрока();
			лРезультат.Регистратор = лТЗ.Док;
			лРезультат.ТорговаяСеть = пСтрокаТЗ.ТорговаяСеть;
			лРезультат.Контрагент = пСтрокаТЗ.Контрагент;
			лРезультат.Договор = пСтрокаТЗ.Договор;
			лРезультат.ГлубинаКредита = пСтрокаТЗ.ГлубинаКредита;
			лРезультат.КредитныйЛимит = пСтрокаТЗ.КредитныйЛимит;
			лРезультат.СуммаДокумента = лТЗ.СуммаДвижения;
			лРезультат.ВозрастКредита = ВыбДата - лТЗ.ДатаДок;
			
			лРезультат.СуммаДолга = ?(лСуммаДолга > лТЗ.СуммаДвижения,лТЗ.СуммаДвижения,лСуммаДолга);
			лСуммаДолга = лСуммаДолга - лРезультат.СуммаДолга;
			
			Если лРезультат.ВозрастКредита > лРезультат.ГлубинаКредита Тогда
				лРезультат.СуммаПросрочки = лРезультат.СуммаДолга;
			КонецЕсли;
			
			Если лСуммаДолга = 0 Тогда // Остальные документы оплачены.
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Если глубина анализа не достаточна для детализаации по документам.
	Если лСуммаДолга > 0 Тогда
		лРезультат.НоваяСтрока();
		лРезультат.Регистратор = ПолучитьПустоеЗначение();
		лРезультат.Контрагент = пСтрокаТЗ.Контрагент;
		лРезультат.ТорговаяСеть = пСтрокаТЗ.ТорговаяСеть;
		лРезультат.Договор = пСтрокаТЗ.Договор;
		лРезультат.ГлубинаКредита = пСтрокаТЗ.ГлубинаКредита;
		лРезультат.КредитныйЛимит = пСтрокаТЗ.КредитныйЛимит;
		лРезультат.СуммаДокумента = лСуммаДолга;
		лРезультат.ВозрастКредита = ?(лСчитатьПросрочку = 1,9999,0);
		лРезультат.СуммаДолга = лСуммаДолга;
		лРезультат.СуммаПросрочки = ?(лСчитатьПросрочку = 1,лСуммаДолга,0);
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции

//--------------------------------------------------------------------------------- 
Функция ПолучитьДанныеДляРасчетаПросроченнойДебиторки(пТЗ)
	Перем лРезультат;
	
	пТЗ.ВыбратьСтроки();
	
	лВсегоСтрок = пТЗ.КоличествоСтрок();
	лОбработано = 1;
	
	Пока пТЗ.ПолучитьСтроку() = 1 Цикл
		
		лТЗ = ПолучитьПоследниеДокументыНаСумму(пТЗ);

		Если ПустоеЗначение(лРезультат) = 1 Тогда
			лТЗ.Выгрузить(лРезультат);
		Иначе
			лНачСтрока = лРезультат.КоличествоСтрок();
			лРезультат.КоличествоСтрок(лНачСтрока + лТЗ.КоличествоСтрок());
			лРезультат.Заполнить(лТЗ,лНачСтрока + 1);
		КонецЕсли;
		
		Состояние("Расчет просроченных документов: " + лОбработано + " из " + лВсегоСтрок);
		лОбработано = лОбработано + 1;
		
	КонецЦикла;
	
	Возврат лРезультат;
	
КонецФункции

//--------------------------------------------------------------------------------- 
Процедура Сформировать()   
	//******** проверка корректности параметров ********
	Если ПустоеЗначение(ВыбДата) = 1 Тогда
		ВыбДата = ТекущаяДата();
	КонецЕсли;
	
	лЕстьГруппировка = 0;
	Для сч = 1 По Группировка.РазмерСписка() Цикл
		Если Группировка.Пометка(сч) = 1 Тогда
			лЕстьГруппировка = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если лЕстьГруппировка = 0 Тогда
		Предупреждение ("Должна быть установлена хоть одна группировка!",10);
		Возврат;
	КонецЕсли;

	лЕстьРесурсы = 0;
	Для сч = 1 По Ресурсы.РазмерСписка() Цикл
		Если Ресурсы.Пометка(сч) = 1 Тогда
			лЕстьРесурсы = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если лЕстьРесурсы = 0 Тогда
		Предупреждение ("Выберите ресурсы!",10);
		Возврат;
	КонецЕсли;

	
	//**************************************************
	
	ЗФ1=Фильтр.Получить("ЗФ1");
	ЗФ2=Фильтр.Получить("ЗФ2");
	ЗФ3=Фильтр.Получить("ЗФ3");
	ЗФ4=Фильтр.Получить("ЗФ4");
	ЗФ5=Фильтр.Получить("ЗФ5");
	ЗФ6=Фильтр.Получить("ЗФ6");
	ЗФ7=Фильтр.Получить("ЗФ7");
	ЗФ8=Фильтр.Получить("ЗФ8");
	        
	   
	// ***** ПЕРВЫЙ ЭТАП: ОТБОР ДОГОВОРОВ ЧЕРЕЗ ФИЛЬТР
	Состояние("Выборка контрагентов.");
	
	ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Договор = Справочник.Договоры.ТекущийЭлемент;
		|Контрагент = Справочник.Договоры.Владелец;
		|ТорговаяСеть = Справочник.Договоры.Владелец.ОсновноеСвойство;
		|Проект = Справочник.Договоры.Владелец._Проект;
		|Функция ГлубинаКредита = Максимум(Договор.ГлубинаКредита);
		|Функция КредитныйЛимит = Максимум(Договор.СуммаКредита);
		|Группировка Договор;
		|"//}}ЗАПРОС
		;
	
	ТекстЗапроса = ТекстЗапроса + Фильтр.Получить("УсловияЗапроса");
        
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли; 

	лТЗ = "";
	Запрос.Выгрузить(лТЗ,1,0);
	        
	лФильтрДоговоров = СоздатьОбъект("СписокЗначений");
	лТЗ.Выгрузить(лФильтрДоговоров,,,"Договор");
	
	// **** ВТОРОЙ ЭТПА: ДОПОЛНЕНИЕ ДАННЫМИ О ЗАДОЛЖЕННОСТЯХ
	Состояние("Расчет общих задолженностей.");
	
	Если ВыбДата = ТекущаяДата() Тогда
		лВыбДата = ПолучитьДатуТА();
	Иначе
		лВыбДата = ВыбДата;
	КонецЕсли;
	
	ТекстЗапроса =	"
		|Период с лВыбДата по лВыбДата;
		|Договор = Регистр.Покупатели.Договор;
		|пзСуммаУпр = Регистр.Покупатели.СуммаУпр;
		//==============Группировка==============
		|Группировка Договор;                                        
		//==============Функции==============  
		|Функция СуммаДолга = КонОст(пзСуммаУпр);
		|Условие (Договор В лФильтрДоговоров);
		|";        
	
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли; 

	лТЗЗадолженность = "";
	Запрос.Выгрузить(лТЗЗадолженность,1,0);
	
	// Добавление к основной ТЗ расчеты по задолженности.
	лТЗ.НоваяКолонка("СуммаДолга","Число");
	
	лТЗЗадолженность.ВыбратьСтроки();
	Пока лТЗЗадолженность.ПолучитьСтроку()=1 Цикл
		Если лТЗЗадолженность.СуммаДолга <= 0 Тогда
			Продолжить;
		КонецЕсли;
		    
		лИскомаяСтрока = 0;
		Если лТЗ.НайтиЗначение(лТЗЗадолженность.Договор,лИскомаяСтрока,"Договор") = 0 Тогда
			ош = 1/0; // Договор не найден. А должен быть!
		КонецЕсли;
		
		лТЗ.УстановитьЗначение(лИскомаяСтрока,"СуммаДолга",лТЗЗадолженность.СуммаДолга);
	КонецЦикла;
	
	// Отбор "Только с задолженностью"
	лТЗ.ВыбратьСтроки();
	Пока лТЗ.ПолучитьСтроку()=1 Цикл
		Пока (лТЗ.ПолучитьЗначение(лТЗ.НомерСтроки,"СуммаДолга") <= 0) Цикл
			лТЗ.УдалитьСтроку(); //следующая строка стала текущей                     
			Если лТЗ.НомерСтроки = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// **** ТРЕТИЙ ЭТАП: РАСЧЕТ ПРОСРОЧЕННЫХ ДОКУМЕНТОВ.
	лТЗ = ПолучитьДанныеДляРасчетаПросроченнойДебиторки(лТЗ);
	 
	//===================Группировочное дерево
	// Динамическое формирование описания группировки.
	спГруппировка = СоздатьОбъект("СписокЗначений");
	//спГруппировка.ИзСтрокиСРазделителями("""Проект"",""Префикс"",""МаршАдрес"",""Контрагент"",""ТорговаяСеть""");
                                                                                
	Для сч = 1 По Группировка.РазмерСписка() Цикл
		Если Группировка.Пометка(сч) = 1 Тогда
			спГруппировка.ДобавитьЗначение(Группировка.ПолучитьЗначение(сч));
		КонецЕсли;
	КонецЦикла; 
	МаксГруппировка = спГруппировка.РазмерСписка();
	
	// Динамическое формирование списка ресурсов.
	спРесурсыГрупп = СоздатьОбъект("СписокЗначений");
	//спРесурсыГрупп.ИзСтрокиСРазделителями("""Показатель1"",""Показатель2"",""прцПоказатель1"",""средПоказатель1""");
	Для сч = 1 По Ресурсы.РазмерСписка() Цикл
		Если Ресурсы.Пометка(сч) = 1 Тогда
			спРесурсыГрупп.ДобавитьЗначение(Ресурсы.ПолучитьЗначение(сч));
		КонецЕсли;
	КонецЦикла; 
	
	                          
	глТЗДерево = ЗагрузитьВДеревоТЗ(лТЗ,спГруппировка,спРесурсыГрупп);
	//Сообщить("Дерево: " + ТекущееВремя());
	
	//глТЗДерево.Сортировать("СуммаРеализация");
	//СмотретьДерево(глТЗДерево);
                         
	
	Печать(глТЗДерево);
	
КонецПроцедуры	// Сформировать

//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------
//---------------------------------------------------------------------------------

Группировка.ДобавитьЗначение("Контрагент", "Контрагент");
Группировка.ДобавитьЗначение("Договор", "Договор");
Группировка.ДобавитьЗначение("Регистратор", "Документ");
Группировка.ДобавитьЗначение("ТорговаяСеть", "Торговая сеть");
Группировка.Пометка(1,1);


Ресурсы.ДобавитьЗначение("КредитныйЛимит","Кредитный лимит");
Ресурсы.ДобавитьЗначение("ГлубинаКредита","Глубина кредита");
Ресурсы.ДобавитьЗначение("ВозрастКредита","Возраст кредита");
Ресурсы.ДобавитьЗначение("СуммаДолга","Сумма задолженности");
Ресурсы.ДобавитьЗначение("СуммаПросрочки","Сумма просрочки");
//Ресурсы.ДобавитьЗначение("СуммаДокумента","Сумма документа");

Для сч = 1 По Ресурсы.РазмерСписка() Цикл
	Ресурсы.Пометка(сч,1);
КонецЦикла;

//Ресурсы.ДобавитьЗначение("прцПоказатель1","Доля показателя 1");
//Ресурсы.ДобавитьЗначение("средПоказатель1","Показатель №1 (сред)");

ОписаниеФильтра="Контрагент		;Контрагенты	;Справочник.Контрагенты
				|ТорговаяСеть	;Сеть			;Справочник.ЗначенияСвойств
				|Проект			;Проект			;Справочник.Проекты";

ГлубинаАнализа = 10; // Анализ сверх глубины кредита.
МинСуммаЗадолженности = 1000;

// Имя; Наименование; ФункцияАгрегатор; 
